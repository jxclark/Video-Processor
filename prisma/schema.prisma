generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique
  plan                String   @default("free") // free, starter, pro, enterprise
  status              String   @default("active") // active, suspended, cancelled
  stripeCustomerId    String?  @map("stripe_customer_id")
  stripeSubscriptionId String? @map("stripe_subscription_id")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  users       User[]
  apiKeys     ApiKey[]
  videos      Video[]
  usage       Usage[]

  @@map("organizations")
}

model User {
  id                String       @id @default(uuid())
  email             String       @unique
  name              String
  passwordHash      String       @map("password_hash")
  role              String       @default("member") // owner, admin, member, viewer
  organizationId    String       @map("organization_id")
  isEmailVerified   Boolean      @default(false) @map("is_email_verified")
  emailVerifyToken  String?      @map("email_verify_token")
  resetPasswordToken String?     @map("reset_password_token")
  resetPasswordExpires DateTime? @map("reset_password_expires")
  lastLoginAt       DateTime?    @map("last_login_at")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy         TeamInvite[] @relation("InvitedByUser")
  auditLogs         AuditLog[]

  @@index([organizationId])
  @@index([email])
  @@map("users")
}

model ApiKey {
  id             String       @id @default(uuid())
  name           String
  key            String       @unique
  organizationId String       @map("organization_id")
  permissions    String[]     @default(["video:read", "video:write"])
  isActive       Boolean      @default(true) @map("is_active")
  lastUsedAt     DateTime?    @map("last_used_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([key])
  @@map("api_keys")
}

model Video {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  originalFilename String       @map("original_filename")
  filePath         String       @map("file_path")
  fileSize         BigInt       @map("file_size")
  mimeType         String       @map("mime_type")
  duration         Float?
  status           String       @default("pending")
  errorMessage     String?      @map("error_message")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transcodedVideos TranscodedVideo[]

  @@index([organizationId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("videos")
}

model TranscodedVideo {
  id         String   @id @default(uuid())
  videoId    String   @map("video_id")
  resolution String
  filePath   String   @map("file_path")
  fileSize   BigInt   @map("file_size")
  bitrate    Int?
  codec      String?
  status     String   @default("pending")
  createdAt  DateTime @default(now()) @map("created_at")
  
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, resolution])
  @@index([videoId])
  @@index([status])
  @@map("transcoded_videos")
}

model Usage {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  month          String       // Format: YYYY-MM
  videosUploaded Int          @default(0) @map("videos_uploaded")
  minutesProcessed Float      @default(0) @map("minutes_processed")
  storageUsed    BigInt       @default(0) @map("storage_used") // in bytes
  apiCalls       Int          @default(0) @map("api_calls")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, month])
  @@index([organizationId])
  @@map("usage")
}

model TeamInvite {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  email          String
  role           String       // admin, member, viewer
  invitedById    String       @map("invited_by_id")
  token          String       @unique
  status         String       @default("pending") // pending, accepted, expired
  expiresAt      DateTime     @map("expires_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  
  invitedBy      User         @relation("InvitedByUser", fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@index([token])
  @@index([organizationId])
  @@map("team_invites")
}

model AuditLog {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String?      @map("user_id")
  action         String       // user.login, user.invite, apikey.create, video.upload, etc.
  resourceType   String?      @map("resource_type") // user, apikey, video, organization
  resourceId     String?      @map("resource_id")
  ipAddress      String?      @map("ip_address")
  userAgent      String?      @map("user_agent")
  metadata       Json?        // Additional context
  createdAt      DateTime     @default(now()) @map("created_at")
  
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([organizationId])
  @@index([userId])
  @@index([action])
  @@index([createdAt(sort: Desc)])
  @@map("audit_logs")
}
